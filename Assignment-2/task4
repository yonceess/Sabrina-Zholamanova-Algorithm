public class MaxHeap<T extends Comparable<T>> {
    private T[] Heap;
    private int size;
    private int maxsize;

    public MaxHeap()
    {
        size=0;
        maxsize=10;
        Heap = (T[]) new Comparable[maxsize];
    }



    public void insert(T element) {
        if (size == maxsize) {
            return;

        } else {
            Heap[size++] = element;
            int current = size-1;
            int parent = (current) / 2;

            while (Heap[current].compareTo(Heap[parent])>0 && parent>=0) {

                T  temp = Heap[parent];
                Heap[parent] = Heap[current];
                Heap[current] = temp;

                current = parent;
                parent = current / 2;

            }
        }
    }

    public void print(){
        for(int i=0; i<size; i++){
            System.out.println(Heap[i]+ " ");
        }
    }

    public T extractMax() {
        T deleted = Heap[0];
        if (size == 0) {
            System.out.println("No values");
        } else {
            T temp = Heap[0];
            Heap[0] = Heap[size - 1];
            Heap[size - 1] = temp;
            size--;
            sort();


        }
        return deleted;
    }

    public void sort()
    {
        int n = size;

        for (int i=n-1; i>=0; i--)
        {
            T temp = Heap[0];
            Heap[0] = Heap[i];
            Heap[i] = temp;


        }
    }


    public static void main(String[] args){
        MaxHeap<Integer> maxheap = new MaxHeap();
        maxheap.insert(5);
        maxheap.insert(1);
        maxheap.insert(3);
        maxheap.insert(40);
        maxheap.insert(60);
        maxheap.insert(19);
        maxheap.insert(25);
        maxheap.print();

        System.out.println("_______________________________");


        System.out.println(maxheap.extractMax());
        System.out.println("_______________________________");
        maxheap.print();


    }
}
